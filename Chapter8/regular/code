import numpy as np
import matplotlib.pyplot as plt

#Example 2
def regularized_fit_data():
    import numpy as np
    """
        regularized_fit_data
    Returns a dictionary `D` with data for the regularized data fitting 
    example on page 329 of VMLS.  The items in the dictionary are:
    * `D["xtest"]`: vector of length 10 
    * `D["ytest"]`: vector of length 10 
    * `D["xtrain"]`: vector of length 20 
    * `D["ytrain"]`: vector of length 20.
    """
    Test = np.array([ 
    [1.06830e-01,  1.82422e+00],
    [2.55780e-01,  8.13549e-01],
    [2.71120e-01,  9.24060e-01],
    [3.02990e-01,  4.20670e-01],
    [5.02040e-01,  4.46178e-01],
    [6.58450e-01, -3.73407e-02],
    [6.84230e-01, -2.10935e-01],
    [7.02590e-01, -1.03327e-01],
    [7.34060e-01,  3.32097e-01],
    [9.40350e-01,  2.29278e+00]])

    Train = np.array([
    [3.96674e-01, -1.05772e+00],
    [7.77517e-01,  8.79117e-01],
    [1.18400e-01,  1.98136e+00],
    [2.23266e-01,  8.67012e-01],
    [9.01463e-01,  2.13650e+00],
    [3.58033e-01, -7.01948e-01],
    [2.60402e-01,  9.41469e-01],
    [8.04281e-01,  1.49755e+00],
    [6.31664e-01,  5.50205e-01],
    [1.49704e-01,  1.34245e+00],
    [5.51333e-01,  1.21445e+00],
    [6.63999e-01,  4.49111e-03],
    [1.64948e-01,  9.57535e-01],
    [6.51698e-01,  7.78640e-02],
    [1.23026e-01,  1.73558e+00],
    [3.37066e-01, -3.25244e-01],
    [8.32080e-02,  2.56555e+00],
    [2.04422e-01,  1.10081e+00],
    [9.78000e-01,  2.70644e+00],
    [4.03676e-01, -1.10049e+00]])
    
    xtest = Test[:,0]
    ytest = Test[:,1]
    xtrain = Train[:,0]
    ytrain = Train[:,1]
    return {"xtrain": xtrain, "ytrain": ytrain , 
        "xtest": xtest, "ytest": ytest}
D = regularized_fit_data()
xtrain = D['xtrain']
ytrain = D['ytrain']
xtest = D['xtest']
ytest = D['ytest']

plt.ion()
plt.scatter(xtrain, ytrain, color='b')
plt.scatter(xtest, ytest, color = 'r', marker ='*', )
plt.xlim(0,1)
plt.ylim(-2,4)
plt.show()

N = len(ytrain)
Ntest = len(ytest)
p = 5
omega = np.array([13.69, 3.55, 23.25, 6.03])
phi = np.array([0.21, 0.02, -1.87, 1.72])

A = np.column_stack((np.ones(N), np.sin(np.outer(xtrain,omega) + np.outer(np.ones(N),phi))))
print(A)
Atest = np.column_stack((np.ones(Ntest), np.sin(np.outer(xtest,omega) + np.outer(np.ones(Ntest),phi))))
npts = 100
lambdas = np.power(10, np.linspace(-6,6,npts))
err_train = np.zeros(npts)
err_test = np.zeros(npts)
thetas = np.zeros((p,npts))
As = [A, np.column_stack([np.zeros(p-1), np.identity(p-1)])]
bs = [ytrain, np.zeros(p-1)]
for k in range(npts):
    lam = [1,lambdas[k]]
    n = len(lam)
    Atil = np.vstack([np.sqrt(lam[i])*As[i] for i in range(n)])
    btil = np.hstack([np.sqrt(lam[i])*bs[i] for i in range(n)])
    theta = np.linalg.lstsq(Atil, btil, rcond=None)[0]
    err_train[k] = (sum((ytrain - A @ theta)**2)/len(ytrain))**0.5
    err_test[k] = (sum((ytest - Atest @ theta)**2)/len(ytest))**0.5
    thetas[:,k] = theta
    # plt.ion()
    # plt.scatter(xtrain, ytrain, color='b')
    # plt.scatter(xtest, ytest, color = 'r', marker ='*')
    # t = np.linspace(0, 1, 100)
    # plt.plot(t,theta[0]+sum([theta[j+1]*np.sin(omega[j]*t+phi[j]) for j in range(len(omega))]))
    # plt.xlim(0,1)
    # plt.ylim(-2,4)
    # plt.show()

plt.ion()
#plot RMS errors
plt.plot(lambdas, err_train.T)
plt.plot(lambdas, err_test.T)
plt.xscale('log')
plt.xlabel('lambda')
plt.legend(['Train', 'Test'], loc='upper left')
plt.ylabel('RMS error')
plt.show()
#Plot coefficients
plt.plot(lambdas, thetas.T)
plt.xscale('log')
plt.xlabel('lambda')
plt.xlim((1e-6, 1e6))
plt.legend(['c', 'a_1', 'a_2', 'a_3', 'a_4'], loc='upper right')
plt.show()
