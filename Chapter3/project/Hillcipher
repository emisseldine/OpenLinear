import numpy as np

def PadMessage(plaintext, N, n):
    cases = {
        "a": "10", "b": "11", "c": "12", "d": "13", "e": "14", "f": "15",
        "g": "16", "h": "17", "i": "18", "j": "19", "k": "20", "l": "21",
        "m": "22", "n": "23", "o": "24", "p": "25", "q": "26", "r": "27",
        "s": "28", "t": "29", "u": "30", "v": "31", "w": "32", "x": "33",
        "y": "34", "z": "35", "A": "36", "B": "37", "C": "38", "D": "39",
        "E": "40", "F": "41", "G": "42", "H": "43", "I": "44", "J": "45",
        "K": "46", "L": "47", "M": "48", "N": "49", "O": "50", "P": "51",
        "Q": "52", "R": "53", "S": "54", "T": "55", "U": "56", "V": "57",
        "W": "58", "X": "59", "Y": "60", "Z": "61", " ": "62", ".": "63",
        ",": "64", "?": "65", "!": "66", "$": "67", "%": "68", "&": "69",
        "0": "70", "1": "71", "2": "72", "3": "73", "4": "74", "5": "75",
        "6": "76", "7": "77", "8": "78", "9": "79", "+": "80", "-": "81", 
        "*": "82", "/": "83", "=": "84", "^": "85", "@": "86", "#": "87",
        "(": "88", ")": "89", ";": "90", ":": "91", "<": "92", ">": "93",
        "'": "94", "[": "95", "]": "96", "{": "97", "}": "98", "_": "99"
        }
    pm = []
    E = ""
    for i in range(len(plaintext)):
        E += cases.get(plaintext[i])
        if int(E) > N:
            pm.append(int(E[:-2]))
            E = E[-2:]
    pm.append(int(E))
    PM = []
    while len(pm) > n:
        PM.append(pm[:n])
        pm = pm[n:]
    if len(pm) != n:
        pm += [1 for i in range(n-len(pm))]
    PM.append(pm)
    return PM

def DepadMessage(ciphertext):
    cases = {
        "10": "a", "11": "b", "12": "c", "13": "d", "14": "e", "15": "f",
        "16": "g", "17": "h", "18": "i", "19": "j", "20": "k", "21": "l",
        "22": "m", "23": "n", "24": "o", "25": "p", "26": "q", "27": "r",
        "28": "s", "29": "t", "30": "u", "31": "v", "32": "w", "33": "x",
        "34": "y", "35": "z", "36": "A", "37": "B", "38": "C", "39": "D",
        "40": "E", "41": "F", "42": "G", "43": "H", "44": "I", "45": "J",
        "46": "K", "47": "L", "48": "M", "49": "N", "50": "O", "51": "P",
        "52": "Q", "53": "R", "54": "S", "55": "T", "56": "U", "57": "V",
        "58": "W", "59": "X", "60": "Y", "61": "Z", "62": " ", "63": ".",
        "64": ",", "65": "?", "66": "!", "67": "$", "68": "%", "69": "&",
        "70": "0", "71": "1", "72": "2", "73": "3", "74": "4", "75": "5",  
        "76": "6", "77": "7", "78": "8", "79": "9", "80": "+", "81": "-", 
        "82": "*", "83": "/", "84": "=", "85": "^", "86": "@", "87": "#", 
        "88": "(", "89": ")", "90": ",", "91": ":", "92": "<", "93": ">", 
        "94": "'", "95": "[", "96": "]", "97": "{", "98": "}", "99": "_"
        }
    D = ""
    for C in ciphertext:
        for c in C:
            if c != 1:
                D += str(c)
    M = ""
    for i in range(len(D)//2):
        M += cases.get(D[2*i:2*i+2])
    return M

def HillEncrypt(plaintext, A, b):
    P = np.array(PadMessage(plaintext, 1e7, len(A)))
    return np.array([A @ p + b for p in P])

def HillDecrypt(ciphertext, A, b):
    D = # Here is the missing code. One line is sufficient to fill in the missing piece.
    #D should be an np.array consists of n-vectors which have been decrypted in the affine sense
    #The following line of code will take that np.array and turn it into a list of lists of integers
    #DepadMessage will take that list of list of integers and turn it back into the plaintext.
    D = [ [int(round(D[i,j],0)) for j in range(len(D[i]))] for i in range(len(D))]
    return DepadMessage(D)
