import numpy as np

def row_scaling(coefficient_matrix, augmented_matrix, scalar, i):
    #your code from Project: Elementary Row Operations

def row_replacement(coefficient_matrix, augmented_matrix, scalar, i, j):
    #your code from Project: Elementary Row Operations

def row_interchange(coefficient_matrix, augmented_matrix, i, j):
    #your code from Project: Elementary Row Operations

def zero_below(coefficient_matrix, constant_matrix, pivot):
    #your code from Project: Row Reduction

def zero_above(coefficient_matrix, constant_matrix, pivot):
    #your code from Project: Row Reduction

def forward_phase(coefficient_matrix, constant_matrix):
    #write your code here
    #returns reduced_coefficient_matrix, reduced_constant_matrix, pivots

def backward_phase(coefficient_matrix, constant_matrix, pivots):
    #write your code here
    #returns reduced_coefficient_matrix, reduced_constant_matrix

def RREF(coefficient_matrix, constant_matrix):
    #write your code here
    #returns reduced_coefficient_matrix, reduced_constant_matrix

def matrix_inverse(matrix):
    #write your code here
    #returns inverse of matrix

### VERIFICATION ############################
aug_matrix = lambda A,B : np.array([np.concatenate((A[i],B.reshape(len(A),-1)[i])) for i in range(len(A))])

A = np.array([[1,1,2,3],[5,5,6,7], [9,9,10,11]])
b = np.array([4, 8, 12])
Ab = aug_matrix(A,b)
print(Ab,"\n")

#forward phase
A,b,piv = forward_phase(A,b)
print(aug_matrix(A,b),"\n",piv,"\n")

#backward phase
A,b = backward_phase(A,b,piv)
print(aug_matrix(A,b),"\n")
                
#RREF
A = np.array([[6,5,0],[4,0,3],[0,2,1]])
b = np.array([13,5,5])
A,b = RREF(A,b)
print(aug_matrix(A,b))

#inverse matrix
A = np.array([[ -17.62298538952109, 11.501615891138508, -18.90957585845351, 8.064800573735518, 3.041236260451587, -12.427276295478965, 36.32578715119185, 9.965807931337359, -8.361459805348483, -2.063132322842499, -45.243644690398895, 6.520261563266029, -20.308420584909445, -0.22434038377750942, 2.3465416121720146],
              [ 13.642070201062168, -14.457325417948226, 18.69002897092551, -20.550229036593088, 4.0758808712073415, -39.8316362835982, -3.707033366640111, -8.821562992077503, 20.14885788234824, 16.61942349953309, -26.38741186623424, 7.9465404380005396, -5.131746306714554, 4.990915104436267, -8.659093038414076],
              [ 10.362104857613058, -5.677167918516686, -4.260600020349182, -30.39193606875395, 0.44565949548804085, -17.241103036946065, 6.779957648446173, 3.3503498652957906, 21.084344292100454, -16.707342429284523, -31.001780119797886, 0.38698193078590215, -26.63538135550356, -5.7420743663357925, 22.55780914693729],
              [ 30.40410908088092, 10.118554667340108, 30.676254447048183, 37.13557784434156, -5.483532617450395, -10.295221617119791, -11.303292640475815, -32.00504668380043, 18.488500493783175, -35.897289525214696, 2.912224196363347, 27.166134312605067, -14.220699297394294, 2.238336518296347, 3.822824319193364],
              [ 2.974381169714332, 17.11568925140094, 3.889067632287876, -22.838843444830943, 0.8128690687311078, 26.22118645952844, -2.596782507941744, 48.33436676402924, 45.40015020996087, 9.527695147937905, -17.002462977921716, -16.306900509189397, 13.02152267381149, -11.835577822098635, 13.423949947145372],
              [ -4.73759475955649, -17.29518919820912, 12.429914848484092, 8.07041492238742, 25.45936846264926, 19.52068426926816, -3.161561036135513, -38.685787365066496, 26.291497696224795, -12.413562908164286, 34.97986967506073, -1.5883889494424581, 45.871648787100085, 11.685587811577987, 10.21713728126033],
              [ -22.92314753290784, 17.949486261491135, -5.937577299915636, 30.859935550573752, -5.917735085601526, 7.513112440316645, -1.7833001866097788, 14.69933421510311, 30.216195998356405, 14.806192353120993, -19.3416974412641, -7.919427061610081, 4.954281405948195, -3.9881971615706515, 20.48637459279071],
              [ 0.24626341617106262, 27.627775624956225, 34.9885254983745, 19.267360907721223, 13.414259248161608, 35.49086906114143, -20.013752635094917, -25.723286847825356, -34.90444521402563, 19.422787642838202, 16.722277314175056, -3.8511148892092244, 0.45573252731244374, 43.33243371535798, 33.263559730503644],
              [ 28.08149654249682, 2.6717669050380595, 11.242844400909185, 8.319081599181882, 6.406576965402561, 8.92207346997537, -31.44078330692009, -11.667284960068889, 0.4288103394485363, -17.698155101104856, -23.50325813171557, -7.519893257573022, -10.47182041889668, -31.256624792378847, -3.187550191961799],
              [ 33.14690798678197, -8.652537661395614, -18.417932924456366, -12.322779853790973, -0.70997982049151, 11.870013403248192, 1.5855717373630256, 18.486229470378795, -1.706841968455724, -3.512907505721625, 20.220879178702894, -6.686916109136707, 16.4434341901395, 14.977747080506674, -8.120799788590556],
              [ 3.201344265224342, 25.610957115143062, 5.270842763994279, -18.317041275367362, -25.453486186131382, -35.80997138768804, -42.30028956064497, -1.6669210069312612, 4.81639342547715, -12.938183031148666, 1.322179743198281, 7.446496651357055, -27.8199060113813, 34.261043908691306, -26.131324646449308],
              [ 27.48127578927631, -23.74649203386915, 22.970081446921792, 50.79258643274092, 29.23038843191091, 24.628555611878337, -0.6517528457085415, -32.63188702597283, -6.972434124487169, -22.905608718620176, 23.811022690551994, 7.256037852803832, -5.677658937687313, -21.63499275134489, -32.87013943088892],
              [ 21.255662083255885, -11.031415245776515, -28.044037225937412, 41.480402873634574, -13.088061446002722, -2.193273807496542, -5.074878894372402, 10.462180478136617, -13.32273228912375, -21.79498737491644, 3.0860510272258566, -15.930437603182968, 15.061397734785784, -50.62593208697116, -18.97556946112737],
              [ -28.21559345519958, -42.589482263103235, -8.35421538795316, 29.872183810756013, 27.343312518499413, -44.547481064037804, -5.713837271132801, -7.65274110978646, 14.911037490640522, 26.6923525630097, 2.991044246456527, -3.6929995829065447, 19.94012928032504, -1.7558948092078226, -30.71344441186242],
              [ -3.6168273297488867, 23.54950395708044, -10.760573684246339, -26.960229356308343, -18.35776610586259, 6.213001181928254, 16.53421454373362, 28.968845378655658, -41.31596926615701, 36.876056118519784, -8.975700788598122, 22.663175904751807, 8.840499479063066, -31.3779967129957, -9.396131182862902]])
print(matrix_inverse(A))
