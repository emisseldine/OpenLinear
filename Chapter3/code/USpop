import numpy as np
    
# birth rate by age
b = np.array([0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,
              0.00020,0.00020,0.00020,0.00020,0.00020,0.00865,0.00865,0.00865,0.0291,0.0291,
              0.04500,0.04500,0.04500,0.04500,0.04500,0.05415,0.05415,0.05415,0.05415,0.05415,
              0.04825,0.04825,0.04825,0.04825,0.04825,0.02250,0.02250,0.02250,0.02250,0.02250,
              0.00510,0.00510,0.00510,0.00510,0.00510,0.00035,0.00035,0.00035,0.00035,0.00035,
              0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,
              0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,
              0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,
              0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,
              0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000,0.00000])
# death rate by age
d = np.array([0.006233531,0.00043589,0.00026947,0.000204902,0.000156036,0.000123248,0.000114598,0.000114376,0.000115162,0.000105343,
              0.000102815,0.000126385,0.000134186,0.000151044,0.000198513,0.000250777,0.000373945,0.00046618,0.000644322,0.000710978,
              0.000764749,0.000872013,0.000867599,0.000884349,0.000940847,0.000918507,0.000953446,0.0009266,0.000993536,0.001009691,
              0.001032978,0.001093391,0.001101121,0.001136812,0.0011531,0.001202851,0.001314278,0.001373002,0.001462925,0.001563418,
              0.001621391,0.00184545,0.002008536,0.002163647,0.002434052,0.002578696,0.00298445,0.003245235,0.003508419,0.003866996,
              0.004133429,0.004537665,0.004939738,0.005333359,0.005713189,0.006023914,0.006697192,0.007100422,0.007692636,0.008279531,
              0.008599523,0.009323437,0.009982931,0.011006394,0.012502959,0.012824344,0.01403828,0.015150423,0.016866838,0.018298819,
              0.019666481,0.02133356,0.023466495,0.025624079,0.028000216,0.030832485,0.034413726,0.037113232,0.041258518,0.044481638,
              0.049641921,0.055387038,0.061485887,0.068029762,0.076734695,0.140356726,0.139209698,0.135899449,0.013550899,0.129064114,
              0.29852544,0.255691981,0.236964396,0.202412519,0.172772869,0.56981711,0.455253936,0.347350803,0.260561047,0.192150778,0.435148848])
# 2010 population in millions for ages 0,...,99 
P = np.array([3.94415,3.97807,4.09693,4.11904,4.06317,4.05686,4.06638,4.03058,4.04649,4.14835,
              4.17254,4.11442,4.10624,4.11801,4.16598,4.24282,4.31614,4.39529,4.50085,4.58523,
              4.51913,4.35429,4.26464,4.19857,4.24936,4.26235,4.15231,4.24887,4.21525,4.22308,
              4.28567,3.97022,3.98685,3.88015,3.83922,3.95643,3.80209,3.93445,4.12188,4.36480,
              4.38327,4.11498,4.07610,4.10511,4.21150,4.50887,4.51976,4.53526,4.53880,4.60590,
              4.66029,4.46463,4.50085,4.38035,4.29200,4.25471,4.03751,3.93639,3.79493,3.64127,
              3.62113,3.49260,3.56318,3.48388,2.65713,2.68076,2.63914,2.64936,2.32367,2.14232,
              2.04312,1.94932,1.86427,1.73696,1.68449,1.62008,1.47107,1.45533,1.40012,1.37119,
              1.30851,1.21287,1.16142,1.07481,0.98572,0.91472,0.81421,0.71291,0.64062,0.53800,
              0.43556,0.34499,0.28139,0.21698,0.16944,0.12972,0.09522,0.06814,0.04590,0.03227, 0.050454]);   
x = P               # x is the 2010 population initially, but will be used to store the predicted data

A= np.vstack((b,    # Creates transition matrix A using the birth/death rates for each age
              np.block([np.diag(1-d[:99]),np.zeros((99,2))]), 
              (1-d[99])*np.eye(1,101,99) + (1-d[100])*np.eye(1,101,100)))     
year=2020                       # The year on which to terminate the simulation

import matplotlib.pyplot as plt # See Appendix for explanation of plt
plt.plot(x)                     # Plots the values for 2010 (initial values)
for i in range(year-2010):      # Using 2020, this loop will run 10 times.
    x = A @ x  
plt.plot(x,"--") 
plt.xlabel('Age') 
plt.ylabel('Population (millions)') 
plt.legend(['2010',str(year)]) 
plt.show()

print("2010 Population:",round(sum(P),1),"million") 
print("Predicted",year,"Population:",round(sum(x),1),"million")
print("Actual 2020 Population: 329.5 million")
