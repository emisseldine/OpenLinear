import numpy as np
from sklearn.metrics import confusion_matrix as errors

boolean = lambda b : 2*int(b)-1
def cross_validate_multiclass(X,y,p=2,folds=5):
    m,n = X.shape
    partition = np.array_split(np.random.permutation(m),folds)
    c = np.zeros((p,folds,n))
    training_matrix = np.zeros((folds,p,p)) 
    test_matrix = np.zeros((folds,p,p))
    IsType = np.array([np.array([boolean(yi == j) for yi in y]) for j in range(p)])
    for k in range(folds):
        test_index = partition[k]
        training_index = np.concatenate(partition[:k]+partition[k+1:])
        for j in range(p):
            a = np.linalg.lstsq(X[training_index],IsType[j,training_index],rcond=None)[0]
            c[j,k,:] = a 
        training_matrix[k] = errors(y[training_index], [np.argmax([c[j,k] @ x for j in range(p)]) for x in X[training_index]])
        test_matrix[k] = errors(y[test_index], [np.argmax([c[j,k] @ x for j in range(p)]) for x in X[test_index]])
    return c,training_matrix,test_matrix

###################### IRIS EXAMPLE ##################################################
from sklearn.datasets import load_iris
iris_names = load_iris()['target_names']
iris_types = load_iris()['target']
iris_features = load_iris()['feature_names']
iris_data = np.array(load_iris()['data'])

X = np.column_stack([iris_data, np.ones(len(iris_types))])
coeffs = cross_validate_multiclass(X, iris_types, len(iris_names))[0]

coeff = np.zeros((len(iris_names),len(iris_features)+1))

for j in range(len(iris_names)):
    coeff[j] = np.array([np.mean(coeffs[j,:,i]) for i in range(len(iris_features)+1)])

predictor = lambda v : #write classifier here

u = np.array([4,3,2,1])
v = np.array([1,1,1,1])

print(predictor(u), predictor(v))
