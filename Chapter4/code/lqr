import numpy as np

def lstsq_constraint(A, b, C, d):   #|Ax-b|^2 is the objective to minimize
    ATA = A.T @ A                   #subject to the constraint Cx=d
    CT = (C.T).reshape((len(ATA), -1))
    p = len(CT[0])
    KKT = np.block([[2*ATA, CT], [CT.T, np.zeros((p, p))]])
    KKTb = np.hstack((2*A.T @ b, d))
    return np.linalg.solve(KKT, KKTb)[:-p]

#Linear Quadratic Regulator
def lqr(A, B, C, a, b, T, rho):     
    n = len(A)
    Bmtx,Cmtx = B.reshape((n,-1)),C.reshape((-1,n))
    m,p = len(Bmtx[0]),len(Cmtx)
    Ablock = np.block([
        [np.kron(np.eye(T+1),Cmtx),np.zeros((p*(T+1),m*T))], 
        [np.zeros((m*T,n*(T+1))),np.sqrt(rho)*np.eye(m*T)]])
    Cblock = np.block([
            [np.kron(np.eye(T,T+1),A) - np.kron(np.eye(T,T+1,1),np.eye(n)),
                  np.kron(np.eye(T),Bmtx)], 
            [np.kron(np.vstack([np.eye(1,T+1,0),np.eye(1,T+1,T)]),np.eye(n)),
                  np.zeros((2*n, m*T))]])
    dblock = np.concatenate((np.zeros(n*T),a,b))
    z = lstsq_constraint(Ablock,np.zeros(len(Ablock)),Cblock,dblock)
    
    x = np.array([z[i*n:(i+1)*n] for i in range(T+1)])
    u = np.array([z[n*(T+1)+(i)*m: n*(T+1)+(i+1)*m] for i in range(T)])
    y = np.array([C @ xt for xt in x])
    return x, u, y 

A = np.array([
    [0.855, 1.161, 0.667],
    [0.015, 1.073, 0.053],
    [-0.084, 0.059, 1.022]])
B = np.array([-0.076, -0.139, 0.342])
C = np.array([0.218, -3.597, -1.683])
a = np.array([0.496, -0.745, 1.394])
b = np.zeros(3)
T = 100

import matplotlib.pyplot as plt
#No Control
Xno = np.zeros((T+1, len(a)))
Xno[0] = a
for k in range(T):
    Xno[k+1] = A @ Xno[k]
yno = C @ Xno.T
plt.plot(np.arange(T+1), yno)
plt.xlabel("t\n No Control")
plt.ylabel("y_t")
plt.ylim(-0.1,0.5)
plt.show()

#Optimal Tradeoff Curve
N = 200
rho = np.power(10, np.linspace(-4, 4, 200))
J_1, J_2 = np.zeros(N), np.zeros(N)
for k in range(N):
    x, u, y = lqr(A,B,C,a,b,T,rho[k])
    J_1[k] = np.linalg.norm(y)**2
    J_2[k] = np.linalg.norm(u)**2
plt.plot(J_1,J_2)
plt.xlabel('J_1\n Output')
plt.ylabel('J_2\n Input')

rhos = [1, 0.2, 0.05]
x, u, y = np.zeros((len(rhos),T+1,3)), np.zeros((len(rhos),T,1)), np.zeros((len(rhos),T+1))
j_1, j_2 = np.zeros(len(rhos)), np.zeros(len(rhos))
for k in range(len(rhos)):
    x[k], u[k], y[k] = lqr(A,B,C,a,b,T,rhos[k])
    j_1, j_2 = np.linalg.norm(y[k])**2, np.linalg.norm(u[k])**2
    plt.scatter(j_1,j_2)
    plt.text(j_1, j_2+0.25, 'rho = ' + str(rhos[k]))
plt.show()

#Specific examples
for k in range(len(rhos)):
    plt.plot(np.arange(T), u[k])
    plt.xlabel('t\n rho = ' + str(rhos[k]))
    plt.ylabel('u_t')
    plt.ylim(-0.5,0.6)
    plt.show()
    
    plt.plot(np.arange(T+1), y[k])
    plt.xlabel('t\n rho = ' + str(rhos[k]))
    plt.ylabel('y_t')
    plt.ylim(-0.1,0.5)
    plt.show()

#Linear State Feedback Control
K = np.zeros(3)
for  i in range(3):
    x,u,y = lqr(A,B,C,np.eye(1,3,i)[0],b,T,1)
    K[i] = u[0]
print(K)
ABK = A + np.outer(B,K) 
Xst = np.zeros((T+1, 3))
Xst[0] = a
for k in range(T):
    Xst[k+1] = ABK @ Xst[k]
yst = C @ Xst.T

plt.plot(np.arange(T), [K @ x for x in Xst[:-1]])
plt.xlabel("t\n State Feedback Control")
plt.ylabel('u_t')
plt.ylim(-0.5,0.6)
plt.show()
    
plt.plot(np.arange(T+1), yst)
plt.xlabel("t\n State Feedback Control")
plt.ylabel("y_t")
plt.ylim(-0.1,0.5)
plt.show()
