import numpy as np

def top_down(normal_vectors, particular_vec):
    #write your code here
    #returns coefficient_matrix, augmented_column

def IsOrthogonal(vectors):
    #write your code here
    #returns True or False

### VERIFICATION ############################
aug_matrix = lambda A,B : np.array([np.concatenate((A[i],B.reshape(len(A),-1)[i])) for i in range(len(A))])

#top-down affine set generated by set of normal vectors and a particular vector
normal = np.array([[1,-1,0],[2,0,-3],[0,2,1]])
particular = np.array([8,2,0])
print(aug_matrix(normal,top_down(normal,particular)[1]), "\n")

#check orthogonal set
X = np.array([[1,2,3],[1,1,-1],[-5,4,-1]])
Y = np.array([[1,0,0],[0,1,0],[0,1,1]])
Z = np.array([[ 0.10648165505277775, -0.14358801908540644, -0.27742700551517235, 0.06062125096635045, 0.04545439840290023, 0.2590293874846813, 0.2207686773398607, -0.17098852868636152, 0.17284165573591448, 0.24879586316073174, -0.3510131673252601, -0.008216621882820855, 0.08588628818898135, 0.12878893497513105, -0.4581120311073462, 0.06175314627094234, -0.15811090612325196, 0.030288766302301894, 0.11122451899230065, -0.14231223987187858, 0.0981266257483063, -0.1448352687574154, -0.40582235869755895, 0.18345053841991854, 0.00886738147495323],
              [ -0.09518046151088846, -0.4075582538882507, -0.12262172292445964, -0.05390071697992032, 0.21977093183179988, 0.05067929176615376, 0.10595833610031051, -0.10316176555696854, 0.1192747373306744, -0.0805278641567382, -0.11140502061574502, 0.26318409443839913, -0.14364892896084155, 0.03547731056478258, 0.2768587796007129, 0.27663043095675127, 0.008609519377735578, 0.008904308267514791, 0.17677094950617384, 0.06385292750578273, -0.24802279346753786, 0.32178103613335424, 0.0497499288806483, 0.12368043706667411, -0.48825464766906657],
              [ -0.25039306185195853, -0.3953956840332691, -0.17920906894103097, 0.012633535115613539, -0.03165080736376191, 0.2170547183449809, 0.018896105242801175, 0.007457584948101652, -0.1848158737553603, -0.18928249691956028, 0.1110317226394419, 0.11062024448752059, 0.31918637660212773, -0.3431084891314352, 0.17433909986966675, 0.1291897921066396, -0.1600184079201051, -0.1796518097701466, -0.15234857142545397, -0.38136474779451046, -0.016574479158714347, -0.19238406411314785, -0.015061241419141072, -0.12211519979372128, 0.24488892765720646],
              [ -0.26194112064385905, -0.025636285010179276, 0.16237662356513374, -0.06099357265359608, -0.1974268382815539, 0.2672921938870092, -0.1817210119188344, 0.20038458298773806, -0.05371743807460067, -0.15006292238190475, 0.16723140516195736, 0.04278273192755027, -0.38632505713038084, -0.15401065356105406, -0.5209239078893587, -0.01985392118923335, -0.2445297899013848, -0.06744914440215434, -0.1214533535256725, -0.0918495684606853, 0.051901733339144884, 0.10597548744248225, 0.11049065167366467, 0.16202247041241405, -0.2778585347086411],
              [ 0.40188127985995337, -0.09909746415669145, 0.3188605856634338, -0.14682773135672234, 0.15570401568083544, 0.053635542139179655, 0.1455912371104374, 0.14701299892840952, -0.04323785204536693, -0.41587502930118964, -0.04191156163209081, -0.08288677181210975, 0.22841142921740137, -0.028338970378924196, -0.041967032125778445, -0.12069017840616356, -0.23735362292249734, 0.4135742990732003, 0.011114180620916595, -0.13371208338436189, 0.1041590723380477, 0.05604206475155387, -0.13173459227621462, -0.23846068305622678, -0.2217425076972414],
              [ -0.3037120030079216, -0.0352095298439652, -0.15870121475305957, 0.28554643573648736, 0.08051289527116565, -0.03360417807252537, 0.376391895461868, -0.05100347261496981, -0.028294797501026005, -0.2069762382841873, 0.005552454485559052, -0.03848650456174602, -0.1178271073026056, -0.047327337157451334, -0.21563638755896555, -0.4093410095910605, 0.3837600481377037, 0.08676980141836288, 0.23290087733616524, -0.16484303045286525, 0.019972187243443098, 0.22336640863589086, 0.07440148718804108, -0.2794625577774188, 0.049350870677954045],
              [ -0.0034996676876259372, -0.03626206277693526, -0.08563856744257291, 0.20691958297549637, -0.05617694890728982, 0.1147075062036022, -0.11533098889626762, 0.18721191483784008, 0.20803598026283565, 0.05635164617254584, -0.2961663357854797, 0.3653800234112575, -0.00047136963599344445, 0.06040673188468301, 0.2272046235321502, -0.6286051654432885, -0.31054441023606805, 0.019199386532567145, -0.12920782374179932, 0.08915822411597606, -0.07502593338330162, -0.11708828137547807, 0.1547320671870777, 0.02281335047092093, -0.02283624862745099],
              [ 0.07256571176815076, 0.1157764901270222, 0.09152790292611733, 0.3288190538264421, 0.6104589582249066, -0.23825161292243374, -0.1400881035514281, 0.029877688769404866, 0.1174361374001212, 0.009157038533248108, 0.2509616828560283, 0.13968633102420167, 0.17951812816500234, -0.0075609868821638814, -0.14215271853837877, -0.0462728380173548, -0.05744425612248066, -0.1927482093084679, -0.15289072671867812, -0.2700272795450361, 0.03099841582194991, 0.181850450187965, -0.04303537540084382, 0.3019550440232768, 0.009291774656621302],
              [ 0.2351127334718305, 0.039967747170674535, -0.16688763946111151, -0.3876112335630301, 0.1127871871640994, 0.061633609274171455, -0.017852219115075278, 0.2308234791240173, 0.15183966805852156, 0.12000384369484506, -0.006451090025557798, 0.10123482597007853, -0.18010605563586826, -0.22719468083846914, 0.09472048422096788, -0.15121236725799372, 0.24575870425801774, -0.438712741462688, -0.07424929608184334, -0.09192105547717118, 0.32752733996288097, 0.08926026477749527, -0.24024218197907954, -0.2610171565271299, -0.15283080618610823],
              [ -0.40149453769982696, -0.19719037446309268, 0.0630412042467301, -0.07462842740044401, 0.28740614734682574, 0.09874586293782442, -0.0768391322519437, 0.22536403336894462, -0.005579063707741029, 0.21370975749497007, 0.14147026738821147, 0.0917487833791179, 0.25324057921456516, 0.20699004897822362, -0.07016149269073191, 0.03559848891988633, 0.1630352966474338, 0.2257626734465866, -0.004175577319404539, 0.3089805287273415, 0.43188462518396303, -0.24625218315450473, 0.06615782876380762, -0.09703351723014628, -0.14154685735502145]])
print(IsOrthogonal(X),
      IsOrthogonal(Y),
      IsOrthogonal(Y[:-1]),
      IsOrthogonal(np.vstack([Y[:-1],np.zeros(3)])),
      IsOrthogonal(X))
